generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_UNPOOLED")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Users {
  id                  String     @id @default(cuid())
  address             String     @unique
  auditeeRole         Boolean    @default(false)
  auditorRole         Boolean    @default(false)
  name                String?
  image               String?
  available           Boolean    @default(false)
  auditors            Auditors[]
  auditees            Audits[]
  wishlistAsRequestor Wishlist[] @relation("UserWishlist")
  wishlistAsReceiver  Wishlist[] @relation("UserWishedBy")
  updatedAt           DateTime   @updatedAt
  createdAt           DateTime   @default(now())
}

enum AuditStatus {
  DISCOVERY // discovery phase
  ATTESTATION // audit is locked, auditors attest to terms
  AUDITING // auditors are auditing, can submit findings. Auditee implements findings
  CHALLENGEABLE // vesting has begun, users can challenge status
  FINALIZED // audit is complete and cannot be challenged
}

model Audits {
  id                 String      @id @default(cuid())
  auditeeId          String
  auditee            Users       @relation(fields: [auditeeId], references: [id], onDelete: Cascade)
  title              String
  description        String
  details            String? // references blob storage URL
  price              Int         @default(0)
  duration           Int         @default(30) // duration in days
  cliff              Int         @default(3) // cliff duration in days (determines reveal).
  token              String?
  status             AuditStatus @default(DISCOVERY)
  auditors           Auditors[]
  history            History[]
  onchainAuditInfoId String?
  onchainNftId       String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

enum AuditorStatus {
  VERIFIED
  REQUESTED
  REJECTED
}

model Auditors {
  id            String        @id @default(cuid())
  auditId       String
  audit         Audits        @relation(fields: [auditId], references: [id], onDelete: Cascade)
  userId        String
  user          Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        AuditorStatus
  history       History[]
  attestedTerms Boolean       @default(false)
  acceptedTerms Boolean       @default(false)
  findings      String? // references blob storage URL
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([auditId, userId])
}

enum HistoryAction {
  APPROVED
  REJECTED
  LEFT
  LOCKED
  OPENED
  EDITED
  FINALIZED
  FINDINGS
  MINTED
}

enum UserType {
  AUDITEE
  AUDITOR
}

model History {
  id        String        @id @default(cuid())
  auditId   String
  audit     Audits        @relation(fields: [auditId], references: [id], onDelete: Cascade)
  auditorId String?
  auditor   Auditors?     @relation(fields: [auditorId], references: [id], onDelete: Cascade)
  action    HistoryAction
  userType  UserType
  comment   String?
  createdAt DateTime      @default(now())

  @@index([auditId], name: "idx_history_audit")
  @@index([auditorId], name: "idx_history_auditor")
}

model Wishlist {
  id          String   @id @default(cuid())
  requestorId String
  receiverId  String
  requestor   Users    @relation("UserWishlist", fields: [requestorId], references: [id], onDelete: Cascade)
  receiver    Users    @relation("UserWishedBy", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([requestorId, receiverId], name: "uniqueWishlistEntry")
}
