generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_UNPOOLED")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id          String   @id @default(cuid())
  address     String   @unique
  auditeeRole Boolean  @default(false)
  auditorRole Boolean  @default(false)
  name        String?
  image       String?
  available   Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  auditors            Auditor[]
  auditees            Audit[]
  wishlistAsRequestor Wishlist[] @relation("UserWishlist")
  wishlistAsReceiver  Wishlist[] @relation("UserWishedBy")
  history             History[]
}

enum AuditStatus {
  DISCOVERY // discovery phase
  ATTESTATION // audit is locked, auditors attest to terms
  AUDITING // auditors are auditing, can submit findings. Auditee implements findings
  CHALLENGEABLE // vesting has begun, users can challenge status
  FINALIZED // audit is complete and cannot be challenged
}

model Audit {
  id                 String   @id @default(cuid())
  auditeeId          String
  title              String
  description        String
  details            String? // references blob storage URL
  price              Int      @default(0)
  duration           Int      @default(30) // duration in days
  cliff              Int      @default(3) // cliff duration in days (determines reveal).
  token              String?
  onchainAuditInfoId String?
  onchainNftId       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  auditee  User        @relation(fields: [auditeeId], references: [id], onDelete: Cascade)
  status   AuditStatus @default(DISCOVERY)
  auditors Auditor[]
  history  History[]
}

enum AuditorStatus {
  VERIFIED
  REQUESTED
  REJECTED
}

model Auditor {
  id            String   @id @default(cuid())
  auditId       String
  userId        String
  attestedTerms Boolean  @default(false)
  acceptedTerms Boolean  @default(false)
  findings      String? // references blob storage URL
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  audit  Audit         @relation(fields: [auditId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status AuditorStatus

  @@unique([auditId, userId])
}

enum HistoryAction {
  APPROVED
  REJECTED
  LEFT
  LOCKED
  OPENED
  EDITED
  FINALIZED
  FINDINGS
  MINTED
}

enum UserType {
  AUDITEE
  AUDITOR
}

model History {
  id        String   @id @default(cuid())
  auditId   String
  userId    String
  comment   String?
  createdAt DateTime @default(now())

  audit    Audit         @relation(fields: [auditId], references: [id], onDelete: Cascade)
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  action   HistoryAction
  userType UserType

  @@index([auditId], name: "idx_history_audit")
  @@index([userId], name: "idx_history_user")
}

model Wishlist {
  id          String   @id @default(cuid())
  requestorId String
  receiverId  String
  createdAt   DateTime @default(now())

  requestor User @relation("UserWishlist", fields: [requestorId], references: [id], onDelete: Cascade)
  receiver  User @relation("UserWishedBy", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([requestorId, receiverId], name: "uniqueWishlistEntry")
}
