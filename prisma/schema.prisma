generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_UNPOOLED")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum AuditStatusType {
  DISCOVERY // discovery phase
  ATTESTATION // audit is locked, auditors attest to terms
  AUDITING // auditors are auditing, can submit findings. Auditee implements findings
  CHALLENGEABLE // vesting has begun, users can challenge status
  FINALIZED // audit is complete and cannot be challenged
}

enum MembershipStatusType {
  VERIFIED
  REQUESTED
  REJECTED
}

enum ActionType {
  AUDITOR_TERMS_APPROVED
  AUDITOR_TERMS_REJECTED
  AUDITOR_FINDINGS
  AUDITOR_LEFT
  OWNER_APPROVED
  OWNER_LOCKED
  OWNER_OPENED
  OWNER_EDITED
  OWNER_FINALIZED
  OWNER_REVEALED
}

enum RoleType {
  OWNER
  AUDITOR
}

model User {
  id          String   @id @default(cuid())
  address     String   @unique
  ownerRole   Boolean  @default(false)
  auditorRole Boolean  @default(false)
  name        String?
  image       String?
  available   Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  memberships AuditMembership[]

  wishlistAsSender   Wishlist[]     @relation("UserWishlist")
  wishlistAsReceiver Wishlist[]     @relation("UserWishedBy")
  notifications      Notification[]
  audits             Audit[]
}

model Audit {
  id                 String          @id @default(cuid())
  ownerId            String
  title              String
  description        String
  details            String? // references blob storage URL
  price              Int             @default(0)
  duration           Int             @default(30)
  cliff              Int             @default(3)
  token              String?
  onchainAuditInfoId String?
  onchainNftId       String?
  status             AuditStatusType @default(DISCOVERY)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  memberships AuditMembership[]
  owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model AuditMembership {
  id            String               @id @default(cuid())
  userId        String
  auditId       String
  role          RoleType
  status        MembershipStatusType
  isActive      Boolean              @default(true)
  attestedTerms Boolean              @default(false)
  acceptedTerms Boolean              @default(false)
  findings      String? // references blob storage URL
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  audit   Audit    @relation(fields: [auditId], references: [id], onDelete: Cascade)
  actions Action[]

  @@unique([userId, auditId])
  @@index([userId, auditId, isActive])
  @@index([userId, auditId, isActive, status])
}

model Action {
  id           String     @id @default(cuid())
  membershipId String
  comment      String?
  createdAt    DateTime   @default(now())
  type         ActionType

  membership    AuditMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  notifications Notification[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  actionId  String
  hasViewed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  action Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@unique([userId, actionId], name: "uniqueUserAction")
  @@index([userId])
  @@index([userId, hasViewed])
}

model Wishlist {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())

  sender   User @relation("UserWishlist", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("UserWishedBy", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId], name: "uniqueWishlistEntry")
}
